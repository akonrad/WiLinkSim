
*** Objects that act as monitors:

RLE_wake ==> object available by threads whenever there are radio frames in fragmenter_buffer

frag_wake ==>object available by threads whenever there are
ip packets in the packet_bufer (simulates the sender)

defrag_wake ==> object available by threads whenever there are
radio frames in the RLE_buffer (simulates the base station)

feedback_frame_wake ==> object available by threads whenever
 there are feedback radio frames in feedback_frame_buffer

**************************************************************
*** senderThread.java

*** fragmenterThread.java:

reads ip packets from packet_buffer

fragments ip packets into radio frames

if wirelessFEC and linkcondition is bad, addFEC:
add m redundant frames to fragmented_buffer

puts radio frames into fragmented_buffer,then wake up
threads waiting for object RLE_wake
FECid is used to identify redundant frames w data frame

reads feedback radio frames, reads frames from
feedback_frame_buffer
determines the linkcondition from feedback radio frame

wakes up threads wating for RLE_wake (means there are frames in fragmented_buffer

*** RLE.java:

waits for object RLE_wake, ei: waits until there are is radio frames into fragmented_buffer

corrupts radio frames

puts modified radio frames into RLE_buffer, then wake up
threads waiting for object defrag1_wake

send feedback frame whenever radio conditions changes
I don't see you or susan or me as a
corrupts feedback frame acoording to channel model

puts feedback frame into feedback_frame_buffer and wake up
threads waiting for object feedback_frame_wake


*** defragmenterThread.java:

thread: defragmenterThread

read radio frames from RLE_buffer



