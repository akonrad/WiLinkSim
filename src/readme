compile and execute: javac *java
		     java WSim

Files to use:
------------
RLgsm.txt  => sample trace use to create models    
datafile > random file used to be tranfered from sender to receiver, datafile (over 700KB)

WSim files:
-----------
pattern4  => use to construct the 4th order Markov chain
SavedConfigs  => saves the name of tests

options => As you go through the GUI, you will be asked to make
several choices. All of your preferences will be saved in a temporary
file called "options" as you go along. After you specify the
conditions completely, you will be asked whether you want to save your
preferences. If you do, the "options" file will be saved in the file
that you have specified, which can then be loaded at a later
time. During most of the GUI, there is no processing done, only saving
options in the file. Once the traces need to be generated, the options
file is read and traces are generated accordingly.

SavedConfigs => name of all the tests

Dump Files: collects sequence number and timestamp information
----------
SENDER_IP_DUMP.txt: TS, num of bytes sent, pkt seq num
RECEIVER_IP_DUMP.txt: TS, num of bytes received, pkt seq num
SENDER_WIRELESS_DUMP.txt: TS, num of bytes sent, pkt seq num, frame seq num (wraps around)
RECEIVER_WIRELESS_DUMP.txt: TS, num of bytes received, pkt seq num, frame seq num
E2E_FEEDBACK_DUMP.txt: good and bad states
WIRELESS_FEEDBACK_DUMP.txt: TS, state, wireless frame sq# (wraps around 127)
WIRELESS_FER_STATISTICS: corrupted frames, total frames, wireless fer

Statistics:
-----------

goodput: measures efficiency, ratio between useful packets and
received packets. correct data pkts/  data pkts + redundant pkts

PER: packet error rate, error data pkts/ all pkts

Statistic dump files:
E2E_GOODPUT_STATISTICS: useful_pkts/sent_pkts, if no FEC is used, PER+GOODPUT=1
E2E_PER-STATISTICS: TS, PER so far, num of error pkts, total num of sent pkts

fecStats: TS, #CorrectedWireless/#totalWireless, totalCorrectedWirelessPackets,totalWirelessPackets

It calculates ratios for every packet that arrives.

Java Files:
-----------
1) WSim.java:

This is the file from where we start the experiment. It starts out the first 
GUI, which asks you to choose between an old experiment or a new experiment. 
If you click on "Run a new experiment", it will run a method called 
runNewExp() within the same file. If you choose "Run a saved experiment" it
will run a method called runOldExp() within the same file.

runNewExp(): This displays a GUI which asks you to choose between a standard 
network or a custom network.

runOldExp(): This displays a GUI which asks you to choose the filename where 
the options are stored from before.

runMainNetworks(): This method in startExp.java displays a GUI which offers 
a choice between three main networks - GSM, GPRS and WLAN. Depending on your 
choice, it adds the frame size in the "options.txt" file.

2) modelsMenu.java

This class is responsible for showing the various models for error or delay 
generation. It enumerates your choices - HMM, Gilbert, M3, MTA. On choosing 
them, you are taken to "errorOrDelayMenu.java", which asks you to choose 
whether to apply these as a delay, or as an error. It stores your preference 
of model in the options.txt file.

3) traceDialogue.java
This class generates a GUI asking you for the trace file on which to base 
your trace generation. It then calls saveState.java, which saves everything 
into options file, such as statistics such as FER and change of state 
values. It also calculates the probability matrix
using the trace file.

4) getStats.java
This file is responsible for generating statistics based on the trace file 
specified. It returns the FER and change of state values, which are saved in 
the options file by saveState.java

5) LossyTrace.java
This file takes in the trace file in the format

good bad
12   1
143  45

and converts it into a file which has the format 00101010000101010, where a 
lossy trace is one which concatenoates the error states in which 0 is no 
longer than the change of state variable.

6) StateGenerator.java

This file takes in the trace file in the format

good bad
12   1
143  45

and converts it into a file which has the format

error_free_burst    error_burst
12                  1
24		    3

It basically compares the length go the good section with the change of 
state variable. If it is less, then we have to add to the error_burst 
length.

This file is converted into a binary trace using binaryTraceGenerator.

7) probabilityMatrix.java

Takes in a binary trace file and generates the probability Matrix based on 
the trace.

8) startup.java

This file where the main experiment is run. This file is called after the 
GUI gets over, and it declares some static variables which are used by the 
entire package. It declares various buffers, which are used for exchanging 
data between different parts of the program, such as the fragmenter and 
sender, the defragmenter and the receiver, etc.

It initializes the various components of the package, such as the 
defragmenter thread, the fragmenter thread, the Radio station (RLE), the 
sender thead and the receiver thread.

9) senderThread.java

This is the thread which reads from the input file. It breaks it up into 
data ip packets of length 256 bytes, where the data segment is 210 bytes 
long. If there is ip losses wanted, then this will selectively drop the 
packets here. It places the packets onto the packet_buffer buffer.

Importantly, this also processes the feedback from the radio station.

10) fragmenterThread.java

This takes in ip packets from the sender and fragments them into the 
wireless packet depending on the type of network you choose. It takes the 
fragmented packets and places them into the fragmented_buffer, where they 
are picked up by the RLE.

11) fragmenterThread1.java

This works like the fragmenterThread, only it fragments the feedback packets 
going from the RLE to the sender. These packets are then defragmented by a 
defragmenter and sent to the sender.

12) defragmenterThread1.java

This takes in packets from the radio station and then defragments them into 
ip Packets so that the receiver can write them into the file. The thread 
also writes the packets into the destination file.

boolean flushFECBuffer(): retunrs 1 if there is FEC frames in the RLE buffer

checkFEC():

13) defragmenterThread2.java

This is the same as defragmenterThread1, only this one defragments the 
feedback messages from the RLE to the sender, so that the sender can use 
them.

14) RLE.java

This is a very important file, for it simulates the radio station between 
the sender and the receiver. It is here that the wireless packets are 
dropped or corrupted depending on the error model chosen. It reads the 
options file to determine the statistics for the error models, and uses 
generators such as gilbertGenerator, mtaGenerator etc. in order to decide 
whether to corrupt (or delay) or not.

It picks up packets from the fragmented_buffer and using the model, makes 
decisions whether to corrupt the packet or not. It then places the packets 
onto the RLE_buffer, from where they are picked up by the defragmenter 
thread.

This also sends the feedback to the sender.
